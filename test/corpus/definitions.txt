================================================================================
comment
================================================================================
\\ this is a single line comment
\*
this is a
multiline comment
*\
--------------------------------------------------------------------------------
(source_file
  (comment)
  (comment))

================================================================================
boolean
================================================================================
true
false
--------------------------------------------------------------------------------
(source_file
  (boolean)
  (boolean))

================================================================================
number
================================================================================
1234
+1234
-1234
1.234
+1.234
-1.234
2e7
2e-7
2.3e7
2.3e-7
--------------------------------------------------------------------------------
(source_file
  (number (integer))
  (number (integer))
  (number (integer))
  (number (float))
  (number (float))
  (number (float))
  (number (enumber))
  (number (enumber))
  (number (enumber))
  (number (enumber)))

================================================================================
string
================================================================================
"hello"
"hel
lo"
--------------------------------------------------------------------------------
(source_file
  (string)
  (string))

================================================================================
symbol
================================================================================
foo
foo'
ready?
a+b
a!b
a$b
a%b
a&b
a*b
a_b
a/b
.
-
+bar
!1337
--------------------------------------------------------------------------------
(source_file
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol))

================================================================================
variable
================================================================================
Foo
Foo'
A+b
A!b
A$b
A%b
A&b
A*b
A_b
A/b
When?
--------------------------------------------------------------------------------
(source_file
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable)
  (variable))

================================================================================
list
================================================================================
[1 (+ 1 1) (+ 1 2)]
[X | Y | Z]
--------------------------------------------------------------------------------
(source_file
  (list
    (number
      (integer))
    (application
      (symbol)
      (number
        (integer))
      (number
        (integer)))
    (application
      (symbol)
      (number
        (integer))
      (number
        (integer))))
  (list
    (cons
      car: (variable)
      car: (variable)
      cdr: (variable))))

================================================================================
tuple
================================================================================
(@p (+ 1 1) a)
--------------------------------------------------------------------------------
(source_file
  (tuple
    (application
      (symbol)
      (number
        (integer))
      (number
        (integer)))
    (symbol)))

================================================================================
vector
================================================================================
(@v 1 <>)
--------------------------------------------------------------------------------
(source_file
  (vector
    (number
      (integer))
    (vector)))

================================================================================
abstraction
================================================================================
(/. X (* X X))
(/. X Y (+ X Y))
--------------------------------------------------------------------------------
(source_file
  (abstraction
    (variable)
    (application
      (symbol)
      (variable)
      (variable)))
  (abstraction
    (variable)
    (variable)
    (application
      (symbol)
      (variable)
      (variable))))

================================================================================
application
================================================================================
(= false (inverter true))
--------------------------------------------------------------------------------
(source_file
  (application
    (symbol)
    (boolean)
    (application
      (symbol)
      (boolean))))

================================================================================
function
================================================================================
(define identity
  X -> X)

(define prefix?
  [] _ -> true
  [X | Y] [X | Z] -> (prefix? Y Z))

(define with-cons-pattern
  [X | Y | Z] -> [X Y Z])

(define greater-or-equal
  X Y -> X where (> X Y)
  _ Y -> Y)
--------------------------------------------------------------------------------
(source_file
  (function
    (symbol)
    (rule
      (pattern
        (variable))
      (variable)))
  (function
    (symbol)
    (rule
      (pattern
        (list)
        (symbol))
      (boolean))
    (rule
      (pattern
        (list
          (cons
            car: (variable)
            cdr: (variable)))
        (list
          (cons
            car: (variable)
            cdr: (variable))))
      (application
        (symbol)
        (variable)
        (variable))))
  (function
    (symbol)
    (rule
      (pattern
        (list
          (cons
            car: (variable)
            car: (variable)
            cdr: (variable))))
      (list
        (variable)
        (variable)
        (variable))))
  (function
    (symbol)
    (rule
      (pattern
        (variable)
        (variable))
      (variable)
      (guard
        (application
          (symbol)
          (variable)
          (variable))))
    (rule
      (pattern
        (symbol)
        (variable))
      (variable))))
